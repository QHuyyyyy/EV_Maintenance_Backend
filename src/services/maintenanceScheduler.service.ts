import cron from 'node-cron';
import { Vehicle } from '../models/vehicle.model';
import { VehicleSubscription } from '../models/vehicleSubcription.model';
import { ServicePackage } from '../models/servicePackage';
import { Alert } from '../models/alert.model';
import Customer from '../models/customer.model';
import { differenceInDays } from 'date-fns';
import { firebaseNotificationService } from '../firebase/fcm.service';

interface AlertPayload {
    vehicleId: string;
    alertId?: string;
    title: string;
    content: string;
    type: 'MAINTENANCE' | 'SUBSCRIPTION_EXPIRY' | 'SERVICE_DUE' | 'SYSTEM' | 'WARNING';
    priority: 'LOW' | 'MEDIUM' | 'HIGH' | 'CRITICAL';
}

export class MaintenanceSchedulerService {
    private cronJob: any;
    startScheduler() {
        console.log('üöÄ Starting Maintenance Scheduler...');

        this.cronJob = cron.schedule('0 */6 * * *', async () => {
            console.log(`[${new Date().toISOString()}] Timer Running maintenance check...`);
            try {
                await this.checkMaintenanceAlerts();
                console.log('‚úÖ Maintenance check completed');
            } catch (error) {
                console.error('‚ùå Error in maintenance check:', error);
            }
        }, {
            scheduled: true,
            timezone: 'Asia/Ho_Chi_Minh'
        });

        console.log('‚úÖ Maintenance Scheduler started');
    }

    /**
     * Stop CRON job
     */
    stopScheduler() {
        if (this.cronJob) {
            this.cronJob.stop();
            console.log('üõë Maintenance Scheduler stopped');
        }
    }

    /**
     * Main logic: Ki·ªÉm tra t·∫•t c·∫£ xe
     */
    private async checkMaintenanceAlerts() {
        try {
            // L·∫•y t·∫•t c·∫£ xe
            const vehicles = await Vehicle.find({});
            console.log(`üìã Found ${vehicles.length} vehicles to check`);

            for (const vehicle of vehicles) {
                await this.checkVehicleAlerts(vehicle);
            }
        } catch (error) {
            console.error('Error checking maintenance alerts:', error);
        }
    }

    /**
     * Ki·ªÉm tra alert cho m·ªôt xe c·ª• th·ªÉ
     */
    private async checkVehicleAlerts(vehicle: any) {
        try {
            // 1Ô∏è‚É£ Ki·ªÉm tra SERVICE_DUE (based on mileage + time)
            await this.checkServiceDueAlert(vehicle);

            // 2Ô∏è‚É£ Ki·ªÉm tra SUBSCRIPTION_EXPIRY
            await this.checkSubscriptionExpiryAlert(vehicle);
        } catch (error) {
            console.error(`Error checking alerts for vehicle ${vehicle._id}:`, error);
        }
    }

    /**
     * 1Ô∏è‚É£ KI·ªÇM TRA SERVICE DUE
     * 
     * Logic:
     * - L·∫•y active subscription c·ªßa xe
     * - N·∫øu kh√¥ng c√≥ subscription ‚Üí skip
     * - Check mileage: (current_mileage - last_alert_mileage) >= km_interval
     *   ‚Üí T·∫°o alert SERVICE_DUE v√† update last_alert_mileage
     * - Check time: (now - last_service_date) >= service_interval_days
     *   ‚Üí T·∫°o alert SERVICE_DUE
     * 
     * üîÑ RESET:
     * - Mileage counter: Khi technician update last_service_date
     *   ‚Üí reset last_alert_mileage = current mileage
     * - Time counter: T·ª± ƒë·ªông reset khi service (last_service_date update)
     * 
     * üìù FIELDS:
     * - duration: Subscription active period (e.g., 30 days)
     * - service_interval_days: Maintenance frequency (e.g., 365 days = yearly)
     * - km_interval: Mileage interval for maintenance (e.g., 10000 km per service)
     * - last_alert_mileage: Mileage khi l·∫ßn cu·ªëi alert ƒë∆∞·ª£c trigger
     */
    private async checkServiceDueAlert(vehicle: any) {
        try {
            // L·∫•y active subscription
            const subscription = await VehicleSubscription.findOne({
                vehicleId: vehicle._id,
                status: "ACTIVE"
            }).populate('package_id');

            if (!subscription) {
                console.log(`‚è≠Ô∏è Vehicle ${vehicle._id}: No active subscription`);
                return;
            }

            const servicePackage = subscription.package_id as any;

            // üîç Ki·ªÉm tra ƒëi·ªÅu ki·ªán SERVICE_DUE
            // Mileage: Check if (current - last_alert) >= interval
            const mileageSinceLastAlert = vehicle.mileage - (vehicle.last_alert_mileage || 0);
            const isServiceDueByMileage = mileageSinceLastAlert >= servicePackage.km_interval;

            // Time: Check if (now - last_service_date) >= interval
            const daysPassedSinceService = vehicle.last_service_date
                ? differenceInDays(new Date(), new Date(vehicle.last_service_date))
                : null;

            const isServiceDueByTime = daysPassedSinceService
                ? daysPassedSinceService >= servicePackage.service_interval_days
                : true; // N·∫øu ch∆∞a c√≥ last_service_date, coi nh∆∞ c·∫ßn service

            if (isServiceDueByMileage || isServiceDueByTime) {
                // üö® T·∫°o alert
                const alertData: AlertPayload = {
                    vehicleId: vehicle._id.toString(),
                    title: 'üîß Service Due',
                    content: this.buildServiceDueContent(
                        vehicle,
                        servicePackage,
                        isServiceDueByMileage,
                        isServiceDueByTime,
                        daysPassedSinceService,
                        mileageSinceLastAlert
                    ),
                    type: 'SERVICE_DUE',
                    priority: this.calculatePriority(
                        isServiceDueByMileage,
                        isServiceDueByTime,
                        daysPassedSinceService,
                        servicePackage.service_interval_days
                    )
                };

                await this.createAlertIfNotExists(alertData, vehicle._id);
            }
        } catch (error) {
            console.error(`Error checking SERVICE_DUE for vehicle ${vehicle._id}:`, error);
        }
    }

    /**
     * 2Ô∏è‚É£ KI·ªÇM TRA SUBSCRIPTION EXPIRY
     * 
     * Logic:
     * - L·∫•y active subscription
     * - N·∫øu subscription s·∫Øp h·∫øt (< 7 ng√†y) ho·∫∑c ƒë√£ h·∫øt
     *   ‚Üí T·∫°o alert SUBSCRIPTION_EXPIRY
     */
    private async checkSubscriptionExpiryAlert(vehicle: any) {
        try {
            const subscription = await VehicleSubscription.findOne({
                vehicleId: vehicle._id,
                status: "ACTIVE"
            }).populate('package_id');

            if (!subscription) {
                return;
            }

            const daysUntilExpiry = differenceInDays(
                new Date(subscription.end_date),
                new Date()
            );

            // ‚ö†Ô∏è N·∫øu subscription s·∫Øp h·∫øt ho·∫∑c ƒë√£ h·∫øt
            if (daysUntilExpiry <= 7) {
                const alertData: AlertPayload = {
                    vehicleId: vehicle._id.toString(),
                    title: daysUntilExpiry <= 0
                        ? '‚ùå Subscription Expired'
                        : `‚è∞ Subscription Expiring Soon (${daysUntilExpiry} days)`,
                    content: this.buildSubscriptionExpiryContent(
                        vehicle,
                        subscription,
                        daysUntilExpiry
                    ),
                    type: 'SUBSCRIPTION_EXPIRY',
                    priority: daysUntilExpiry <= 0 ? 'CRITICAL' : 'HIGH'
                };

                await this.createAlertIfNotExists(alertData);
            }
        } catch (error) {
            console.error(`Error checking SUBSCRIPTION_EXPIRY for vehicle ${vehicle._id}:`, error);
        }
    }

    /**
     * Build content cho SERVICE_DUE alert
     */
    private buildServiceDueContent(
        vehicle: any,
        servicePackage: any,
        byMileage: boolean,
        byTime: boolean,
        daysPassedSinceService: number | null,
        mileageSinceLastAlert: number = 0
    ): string {
        let content = `üöó ${vehicle.vehicleName} (${vehicle.model})\n`;
        content += `\nüìä Current Status:\n`;
        content += `‚Ä¢ Mileage: ${vehicle.mileage} km\n`;
        content += `‚Ä¢ Since Last Alert: ${mileageSinceLastAlert} km (Threshold: ${servicePackage.km_interval} km)\n`;

        if (daysPassedSinceService !== null) {
            content += `‚Ä¢ Last Service: ${daysPassedSinceService} days ago (Interval: ${servicePackage.service_interval_days} days)\n`;
        }

        content += `\nüõë Reason(s) for Alert:\n`;
        if (byMileage) {
            const kmOver = mileageSinceLastAlert - servicePackage.km_interval;
            content += `‚Ä¢ Mileage exceeded by ${kmOver} km\n`;
        }
        if (byTime) {
            if (daysPassedSinceService !== null) {
                const daysOver = daysPassedSinceService - servicePackage.service_interval_days;
                content += `‚Ä¢ Time interval exceeded by ${daysOver} days\n`;
            } else {
                content += `‚Ä¢ No service record found\n`;
            }
        }

        content += `\nüí° Recommended Action:\n`;
        content += `Schedule a ${servicePackage.name} service now to maintain vehicle health and warranty.`;

        return content;
    }

    /**
     * Build content cho SUBSCRIPTION_EXPIRY alert
     */
    private buildSubscriptionExpiryContent(
        vehicle: any,
        subscription: any,
        daysUntilExpiry: number
    ): string {
        let content = `üöó ${vehicle.vehicleName} (${vehicle.model})\n`;
        content += `\nüìÖ Subscription Details:\n`;
        content += `‚Ä¢ Package: ${(subscription.package_id as any).name}\n`;

        if (daysUntilExpiry <= 0) {
            content += `‚Ä¢ Status: ‚ùå EXPIRED (${Math.abs(daysUntilExpiry)} days ago)\n`;
        } else {
            content += `‚Ä¢ Expires in: ${daysUntilExpiry} days\n`;
            content += `‚Ä¢ Expiry Date: ${new Date(subscription.end_date).toDateString()}\n`;
        }

        content += `\nüí° Recommended Action:\n`;
        content += `Renew your subscription now to continue receiving maintenance alerts and services.`;

        return content;
    }

    /**
     * T√≠nh priority d·ª±a tr√™n urgency
     */
    private calculatePriority(
        byMileage: boolean,
        byTime: boolean,
        daysPassedSinceService: number | null,
        serviceDuration: number
    ): 'LOW' | 'MEDIUM' | 'HIGH' | 'CRITICAL' {
        // N·∫øu c·∫£ 2 ƒëi·ªÅu ki·ªán ƒë·ªÅu v∆∞·ª£t ‚Üí CRITICAL
        if (byMileage && byTime) {
            return 'CRITICAL';
        }

        // N·∫øu v∆∞·ª£t mileage ‚Üí HIGH
        if (byMileage) {
            return 'HIGH';
        }

        // N·∫øu v∆∞·ª£t time interval nhi·ªÅu ‚Üí HIGH
        if (byTime && daysPassedSinceService) {
            const daysOver = daysPassedSinceService - serviceDuration;
            if (daysOver > serviceDuration * 0.5) { // N·∫øu v∆∞·ª£t > 50% interval
                return 'HIGH';
            }
            return 'MEDIUM';
        }

        return 'MEDIUM';
    }

    /**
     * T·∫°o alert ch·ªâ n·∫øu ch∆∞a t·ªìn t·∫°i
     * (Tr√°nh t·∫°o duplicate alerts)
     * 
     * üîÑ Update last_alert_mileage n·∫øu alert l√† SERVICE_DUE
     */
    private async createAlertIfNotExists(alertData: AlertPayload, vehicleId?: any) {
        try {
            // Ki·ªÉm tra c√≥ alert SERVICE_DUE ho·∫∑c SUBSCRIPTION_EXPIRY ch∆∞a ƒë·ªçc kh√¥ng
            const existingAlert = await Alert.findOne({
                vehicleId: alertData.vehicleId,
                type: alertData.type,
                isRead: false,
                createdAt: {
                    $gte: new Date(Date.now() - 24 * 60 * 60 * 1000) // Trong 24h
                }
            });

            if (existingAlert) {
                console.log(`‚ÑπÔ∏è Alert already exists for vehicle ${alertData.vehicleId} (type: ${alertData.type})`);
                return;
            }

            // T·∫°o alert m·ªõi
            const newAlert = new Alert(alertData);
            const savedAlert = await newAlert.save();

            console.log(`‚úÖ Alert created for vehicle ${alertData.vehicleId}: ${alertData.title}`);

            // üîÑ UPDATE last_alert_mileage n·∫øu l√† SERVICE_DUE alert
            if (alertData.type === 'SERVICE_DUE' && vehicleId) {
                const vehicle = await Vehicle.findById(vehicleId);
                if (vehicle) {
                    vehicle.last_alert_mileage = vehicle.mileage; // Set to current mileage
                    await vehicle.save();
                    console.log(`üìç Updated last_alert_mileage to ${vehicle.mileage} km for vehicle ${vehicleId}`);
                }
            }

            // üîî G·ª≠i notification qua Firebase (ADD alertId t·ª´ saved alert)
            alertData.alertId = savedAlert._id.toString();
            await this.sendNotification(alertData);
        } catch (error) {
            console.error(`Error creating alert:`, error);
        }
    }

    /**
     * üîî G·ª≠i notification qua Firebase Cloud Messaging
     * 
     * Logic:
     * 1. L·∫•y vehicle ƒë·ªÉ t√¨m customerId
     * 2. L·∫•y customer ƒë·ªÉ t√¨m deviceTokens
     * 3. G·ª≠i push notification ƒë·∫øn t·∫•t c·∫£ devices
     * 4. X√≥a tokens kh√¥ng h·ª£p l·ªá (device ƒë√£ uninstall app)
     */
    private async sendNotification(alertData: AlertPayload) {
        try {
            // 1Ô∏è‚É£ L·∫•y vehicle
            const vehicle = await Vehicle.findById(alertData.vehicleId);
            if (!vehicle || !vehicle.customerId) {
                console.log(`‚è≠Ô∏è Vehicle ${alertData.vehicleId}: No customer associated`);
                return;
            }

            // 2Ô∏è‚É£ L·∫•y customer v·ªõi device tokens
            const customer = await Customer.findById(vehicle.customerId);
            if (!customer || !customer.deviceTokens || customer.deviceTokens.length === 0) {
                console.log(`‚è≠Ô∏è Customer ${vehicle.customerId}: No registered device tokens`);
                return;
            }

            // 3Ô∏è‚É£ T·∫°o notification payload
            const notificationPayload = {
                tokens: customer.deviceTokens,
                notification: {
                    title: alertData.title,
                    body: alertData.content.substring(0, 200), // Gi·ªõi h·∫°n 200 k√Ω t·ª± cho body
                },
                data: {
                    type: 'alert',                    // ‚Üê FIX: Send 'alert' type (mobile expects this)
                    id: alertData.alertId || alertData.vehicleId,  // ‚Üê FIX: Use alertId if available, fallback to vehicleId
                    vehicleId: alertData.vehicleId,   // ‚Üê Keep for context but id is primary
                    alertType: alertData.type,        // ‚Üê ADD: Keep specific type (SERVICE_DUE, SUBSCRIPTION_EXPIRY)
                    priority: alertData.priority,
                    timestamp: new Date().toISOString(),
                    // D·ªØ li·ªáu chi ti·∫øt ƒë·ªÉ app x·ª≠ l√Ω
                    fullContent: alertData.content,
                }
            };

            // 4Ô∏è‚É£ G·ª≠i ƒë·∫øn t·∫•t c·∫£ devices
            console.log(`üì§ Sending notification to ${customer.deviceTokens.length} device(s)...`);
            const result = await firebaseNotificationService.sendMulticast(notificationPayload);

            // 5Ô∏è‚É£ X·ª≠ l√Ω invalid tokens
            if (result.invalidTokens && result.invalidTokens.length > 0) {
                console.log(`‚ö†Ô∏è Removing ${result.invalidTokens.length} invalid token(s)`);
                await firebaseNotificationService.removeInvalidTokens(
                    result.invalidTokens,
                    vehicle.customerId.toString()
                );
            }

            console.log(`‚úÖ Notification sent successfully (Success: ${result.successCount}, Failed: ${result.failureCount})`);

        } catch (error) {
            console.error('‚ùå Error sending notification:', error);
        }
    }

    /**
     * Manual trigger (d√πng cho testing)
     * Endpoint: POST /scheduler/trigger
     */
    async manualTrigger() {
        console.log('üî´ Manual trigger called');
        await this.checkMaintenanceAlerts();
    }
}

export const maintenanceScheduler = new MaintenanceSchedulerService();
